plugins {
	//id 'fabric-loom' version '0.11.+'
	//id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
	//id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
	//id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'dev.architectury.loom' version '0.12.0-SNAPSHOT'
	id 'java-library'
	id 'maven-publish'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

loom {
	forge {
		mixinConfigs = [
				"spruceui.mixins.json"
		]
	}
}

// This field defines the Java version your mod target.
def targetJavaVersion = 17

Set<String> modules = [
		'fabric-api-base',
		'fabric-lifecycle-events-v1',
		'fabric-rendering-v1',
		'fabric-resource-loader-v0',
		'fabric-screen-api-v1'
]

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

sourceSets {
	testmod {
		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

repositories {
	mavenLocal()
}

configurations {
	api.extendsFrom libApi
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	modules.stream().map { fabricApi.module(it, project.fabric_api_version) }.forEach {
		modImplementation it
	}

	libApi 'org.jetbrains:annotations:20.1.0'

}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.deprecation(true)
	it.options.incremental(true)
	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('META-INF/mods.toml') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		mavenLocal()
		maven {
			name 'BuildDirLocal'
			url "$buildDir/repo"
		}
	}
}
